import { useState } from 'react';
import './Tools.css';
import FileConverter from './FileConverter';
import InfoBox from './InfoBox';
import Alert from './Alert';

const Tools = ({ searchTerm, selectedConverter }) => {
    const [activeContainer, setActiveContainer] = useState(null);
    const [message, setMessage] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    const handleConvert = async (endpoint, targetFormat, file) => {
        if (!file) {
            setMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.');
            return;
        }

        setIsLoading(true);
        setMessage(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ ${targetFormat.toUpperCase()}...`);

        try {
            const formData = new FormData();
            formData.append('File', file);

            const response = await fetch(
                `https://v2.convertapi.com/convert/${endpoint}?Secret=secret_KZTZ8nEF9oViP4GP`,
                {
                    method: 'POST',
                    headers: { 'Accept': 'application/octet-stream' },
                    body: formData
                }
            );

            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `converted_${Date.now()}.${targetFormat}`;
            document.body.appendChild(a);
            a.click();
            
            setTimeout(() => {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 100);
        
            setMessage(`–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ ${targetFormat.toUpperCase()}!`);
        } catch (error) {
            setMessage(`–û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            setIsLoading(false);
        }
    };

    const toggleContainer = (formatId) => {
        setActiveContainer(activeContainer === formatId ? null : formatId);
        setMessage('');
    };

    const handleMergePdf = async (files) => {
        if (!files || files.length < 2) {
            setMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 PDF —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.');
            return;
        }

        const invalidFiles = Array.from(files).filter(file => 
            !file.name.toLowerCase().endsWith('.pdf')
        );
        
        if (invalidFiles.length > 0) {
            setMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.');
            return;
        }

        setIsLoading(true);
        setMessage(`–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ ${files.length} PDF —Ñ–∞–π–ª–æ–≤...`);

        try {
            const formData = new FormData();
            Array.from(files).forEach((file, index) => {
                formData.append(`Files[${index}]`, file);
            });

            const response = await fetch(
                `https://v2.convertapi.com/convert/pdf/to/merge?Secret=secret_KZTZ8nEF9oViP4GP`,
                {
                    method: 'POST',
                    headers: { 'Accept': 'application/octet-stream' },
                    body: formData
                }
            );

            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `merged_${Date.now()}.pdf`;
            document.body.appendChild(a);
            a.click();
            
            setTimeout(() => {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 100);
        
            setMessage(`–£—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ ${files.length} PDF —Ñ–∞–π–ª–æ–≤!`);
        } catch (error) {
            setMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏: ${error.message}`);
        } finally {
            setIsLoading(false);
        }
    };
        const formatGroups = [
        {
            name: 'PDF –û–ø–µ—Ä–∞—Ü–∏–∏',
            formats: [
                {
                    id: 'pdf-merge',
                    title: '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å PDF',
                    accept: '.pdf',
                    multiple: true,
                    minFiles: 2,
                    icon: 'üìÇ',  // –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏
                    description: '–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω',
                    handler: handleMergePdf
                },
            ]
        },
        {
            name: 'PDF –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã',
            formats: [
                { 
                    id: 'pdf-docx', 
                    title: 'PDF –≤ DOCX', 
                    accept: '.pdf',
                    icon: 'üìë',  // –î–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞–≥–Ω—É—Ç—ã–º —É–≥–æ–ª–∫–æ–º
                    handler: (file) => handleConvert('pdf/to/docx', 'docx', file)
                },
                { 
                    id: 'pdf-jpg', 
                    title: 'PDF –≤ JPG', 
                    accept: '.pdf',
                    icon: 'üñºÔ∏è',  // –ö–∞—Ä—Ç–∏–Ω–∞ –≤ —Ä–∞–º–∫–µ
                    handler: (file) => handleConvert('pdf/to/jpg', 'jpg', file)
                },
                { 
                    id: 'pdf-png', 
                    title: 'PDF –≤ PNG', 
                    accept: '.pdf',
                    icon: 'üèûÔ∏è',  // –ì–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂
                    handler: (file) => handleConvert('pdf/to/png', 'png', file)
                },
                { 
                    id: 'pdf-csv', 
                    title: 'PDF –≤ CSV', 
                    accept: '.pdf',
                    icon: 'üìä',  // –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
                    handler: (file) => handleConvert('pdf/to/csv', 'csv', file)
                },
                { 
                    id: 'pdf-xlsx', 
                    title: 'PDF –≤ XLSX', 
                    accept: '.pdf',
                    icon: 'üìà',  // –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞
                    handler: (file) => handleConvert('pdf/to/xlsx', 'xlsx', file)
                },
                { 
                    id: 'pdf-pptx', 
                    title: 'PDF –≤ PPTX', 
                    accept: '.pdf',
                    icon: 'üìΩÔ∏è',  // –ü—Ä–æ–µ–∫—Ç–æ—Ä
                    handler: (file) => handleConvert('pdf/to/pptx', 'pptx', file)
                },
                { 
                    id: 'pdf-html', 
                    title: 'PDF –≤ HTML', 
                    accept: '.pdf',
                    icon: 'üñ•Ô∏è',  // –ù–∞—Å—Ç–æ–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä
                    handler: (file) => handleConvert('pdf/to/html', 'html', file)
                },
                { 
                    id: 'pdf-svg', 
                    title: 'PDF –≤ SVG', 
                    accept: '.pdf',
                    icon: '‚úèÔ∏è',  // –ö–∞—Ä–∞–Ω–¥–∞—à
                    handler: (file) => handleConvert('pdf/to/svg', 'svg', file)
                },
                { 
                    id: 'pdf-tiff', 
                    title: 'PDF –≤ TIFF', 
                    accept: '.pdf',
                    icon: 'üñ®Ô∏è',  // –ü—Ä–∏–Ω—Ç–µ—Ä
                    handler: (file) => handleConvert('pdf/to/tiff', 'tiff', file)
                },
                { 
                    id: 'pdf-txt', 
                    title: 'PDF –≤ TXT', 
                    accept: '.pdf',
                    icon: 'üìù',  // –ó–∞–ø–∏—Å–∫–∞
                    handler: (file) => handleConvert('pdf/to/txt', 'txt', file)
                },
                { 
                    id: 'pdf-webp', 
                    title: 'PDF –≤ WEBP', 
                    accept: '.pdf',
                    icon: 'üåê',  // –ì–ª–æ–±—É—Å
                    handler: (file) => handleConvert('pdf/to/webp', 'webp', file)
                },
            ]
        },
        {
            name: 'DOCX –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã',
            formats: [
                { 
                    id: 'docx-pdf', 
                    title: 'DOCX –≤ PDF', 
                    accept: '.docx',
                    icon: 'üì∞',  // –ì–∞–∑–µ—Ç–∞
                    handler: (file) => handleConvert('docx/to/pdf', 'pdf', file)
                },
                { 
                    id: 'docx-jpg', 
                    title: 'DOCX –≤ JPG', 
                    accept: '.docx',
                    icon: 'üé®',  // –ü–∞–ª–∏—Ç—Ä–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
                    handler: (file) => handleConvert('docx/to/jpg', 'jpg', file)
                },
                { 
                    id: 'docx-html', 
                    title: 'DOCX –≤ HTML', 
                    accept: '.docx',
                    icon: 'üíª',  // –ù–æ—É—Ç–±—É–∫
                    handler: (file) => handleConvert('docx/to/html', 'html', file)
                },
                { 
                    id: 'docx-pages', 
                    title: 'DOCX –≤ PAGES', 
                    accept: '.docx',
                    icon: 'üìì',  // –¢–µ—Ç—Ä–∞–¥—å
                    handler: (file) => handleConvert('docx/to/pages', 'pages', file)
                },
                { 
                    id: 'docx-txt', 
                    title: 'DOCX –≤ TXT', 
                    accept: '.docx',
                    icon: 'üóíÔ∏è',  // –ë–ª–æ–∫–Ω–æ—Ç
                    handler: (file) => handleConvert('docx/to/txt', 'txt', file)
                },
                { 
                    id: 'docx-png', 
                    title: 'DOCX –≤ PNG', 
                    accept: '.docx',
                    icon: 'üñçÔ∏è',  // –ú–µ–ª–∫–∏
                    handler: (file) => handleConvert('docx/to/png', 'png', file)
                },
                { 
                    id: 'docx-webp', 
                    title: 'DOCX –≤ WEBP', 
                    accept: '.docx',
                    icon: 'üñ±Ô∏è',  // –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –º—ã—à—å
                    handler: (file) => handleConvert('docx/to/webp', 'webp', file)
                },
                { 
                    id: 'docx-xml', 
                    title: 'DOCX –≤ XML', 
                    accept: '.docx',
                    icon: 'üìü',  // –ü–µ–π–¥–∂–µ—Ä
                    handler: (file) => handleConvert('docx/to/xml', 'xml', file)
                },
                { 
                    id: 'docx-xps', 
                    title: 'DOCX –≤ XPS', 
                    accept: '.docx',
                    icon: 'üì†',  // –§–∞–∫—Å
                    handler: (file) => handleConvert('docx/to/xps', 'xps', file)
                },
                { 
                    id: 'docx-tiff', 
                    title: 'DOCX –≤ TIFF', 
                    accept: '.docx',
                    icon: 'üñ©',  // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
                    handler: (file) => handleConvert('docx/to/tiff', 'tiff', file)
                },
                { 
                    id: 'docx-odt', 
                    title: 'DOCX –≤ ODT', 
                    accept: '.docx',
                    icon: 'üìã',  // –ö–ª–∏–ø–±–æ—Ä–¥
                    handler: (file) => handleConvert('docx/to/odt', 'odt', file)
                }
            ]
        },
        {
            name: 'Excel –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã',
            formats: [
                { 
                    id: 'xlsx-pdf', 
                    title: 'XLSX –≤ PDF', 
                    accept: '.xlsx,.xls',
                    icon: 'üßæ',  // –ß–µ–∫
                    handler: (file) => handleConvert('xlsx/to/pdf', 'pdf', file)
                },
                { 
                    id: 'xlsx-webp', 
                    title: 'XLSX –≤ WEBP', 
                    accept: '.xlsx,.xls',
                    icon: 'üñ≤Ô∏è',  // –¢—Ä–µ–∫–±–æ–ª
                    handler: (file) => handleConvert('xlsx/to/webp', 'webp', file)
                },
                { 
                    id: 'xlsx-numbers', 
                    title: 'XLSX –≤ NUMBERS', 
                    accept: '.xlsx,.xls',
                    icon: 'üî¢',  // –¶–∏—Ñ—Ä—ã
                    handler: (file) => handleConvert('xlsx/to/numbers', 'numbers', file)
                },
                { 
                    id: 'xlsx-csv', 
                    title: 'XLSX –≤ CSV', 
                    accept: '.xlsx,.xls',
                    icon: 'üìú',  // –°–≤–∏—Ç–æ–∫
                    handler: (file) => handleConvert('xlsx/to/csv', 'csv', file)
                },
                { 
                    id: 'xlsx-jpg', 
                    title: 'XLSX –≤ JPG', 
                    accept: '.xlsx,.xls',
                    icon: 'üñåÔ∏è',  // –ö–∏—Å—Ç—å —Ö—É–¥–æ–∂–Ω–∏–∫–∞
                    handler: (file) => handleConvert('xlsx/to/jpg', 'jpg', file)
                },
                { 
                    id: 'xlsx-png', 
                    title: 'XLSX –≤ PNG', 
                    accept: '.xlsx,.xls',
                    icon: 'üé≠',  // –¢–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ –º–∞—Å–∫–∏
                    handler: (file) => handleConvert('xlsx/to/png', 'png', file)
                }
            ]
        },
        {
            name: 'Web –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã',
            formats: [
                { 
                    id: 'html-pdf', 
                    title: 'HTML –≤ PDF', 
                    accept: '.html,.htm',
                    icon: 'üì∞',  // –ì–∞–∑–µ—Ç–∞
                    handler: (file) => handleConvert('html/to/pdf', 'pdf', file)
                },
                { 
                    id: 'html-odt', 
                    title: 'HTML –≤ ODT', 
                    accept: '.html,.htm',
                    icon: 'üìò',  // –°–∏–Ω—è—è –∫–Ω–∏–≥–∞
                    handler: (file) => handleConvert('html/to/odt', 'odt', file)
                },
                { 
                    id: 'html-jpg', 
                    title: 'HTML –≤ JPG', 
                    accept: '.html,.htm',
                    icon: 'üñºÔ∏è',  // –ö–∞—Ä—Ç–∏–Ω–∞
                    handler: (file) => handleConvert('html/to/jpg', 'jpg', file)
                },
                { 
                    id: 'html-docx', 
                    title: 'HTML –≤ DOCX', 
                    accept: '.html,.htm',
                    icon: 'üìô',  // –û—Ä–∞–Ω–∂–µ–≤–∞—è –∫–Ω–∏–≥–∞
                    handler: (file) => handleConvert('html/to/docx', 'docx', file)
                },
                { 
                    id: 'html-png', 
                    title: 'HTML –≤ PNG', 
                    accept: '.html,.htm',
                    icon: 'üñçÔ∏è',  // –ú–µ–ª–∫–∏
                    handler: (file) => handleConvert('html/to/png', 'png', file)
                },
                { 
                    id: 'html-txt', 
                    title: 'HTML –≤ TXT', 
                    accept: '.html,.htm',
                    icon: 'üìî',  // –¢–µ—Ç—Ä–∞–¥—å —Å –æ–±–ª–æ–∂–∫–æ–π
                    handler: (file) => handleConvert('html/to/txt', 'txt', file)
                },
                { 
                    id: 'html-xlsx', 
                    title: 'HTML –≤ XLSX', 
                    accept: '.html,.htm',
                    icon: 'üìó',  // –ó–µ–ª–µ–Ω–∞—è –∫–Ω–∏–≥–∞
                    handler: (file) => handleConvert('html/to/xlsx', 'xlsx', file)
                },
                { 
                    id: 'html-xls', 
                    title: 'HTML –≤ XLS', 
                    accept: '.html,.htm',
                    icon: 'üìï',  // –ö—Ä–∞—Å–Ω–∞—è –∫–Ω–∏–≥–∞
                    handler: (file) => handleConvert('html/to/xls', 'xls', file)
                },
                { 
                    id: 'html-md', 
                    title: 'HTML –≤ MD', 
                    accept: '.html,.htm',
                    icon: 'üìö',  // –ö–Ω–∏–≥–∏
                    handler: (file) => handleConvert('html/to/md', 'md', file)
                }
            ]
        },
        {
            name: 'GIF –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã',
            formats: [
                { 
                    id: 'gif-jpg', 
                    title: 'GIF –≤ JPG', 
                    accept: '.gif',
                    icon: 'üì∑',  // –§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç
                    handler: (file) => handleConvert('gif/to/jpg', 'jpg', file)
                },
                { 
                    id: 'gif-pdf', 
                    title: 'GIF –≤ PDF', 
                    accept: '.gif',
                    icon: 'üé¨',  // –ö–∏–Ω–æ–∫–ª–∞–ø–ø–µ—Ä
                    handler: (file) => handleConvert('gif/to/pdf', 'pdf', file)
                },
                { 
                    id: 'gif-png', 
                    title: 'GIF –≤ PNG', 
                    accept: '.gif',
                    icon: 'üé®',  // –ü–∞–ª–∏—Ç—Ä–∞
                    handler: (file) => handleConvert('gif/to/png', 'png', file)
                },
                { 
                    id: 'gif-svg', 
                    title: 'GIF –≤ SVG', 
                    accept: '.gif',
                    icon: '‚úíÔ∏è',  // –ü–µ—Ä–æ
                    handler: (file) => handleConvert('gif/to/svg', 'svg', file)
                },
                { 
                    id: 'gif-tiff', 
                    title: 'GIF –≤ TIFF', 
                    accept: '.gif',
                    icon: 'üñãÔ∏è',  // –†—É—á–∫–∞
                    handler: (file) => handleConvert('gif/to/tiff', 'tiff', file)
                },
                { 
                    id: 'gif-webp', 
                    title: 'GIF –≤ WEBP', 
                    accept: '.gif',
                    icon: 'üìπ',  // –í–∏–¥–µ–æ–∫–∞–º–µ—Ä–∞
                    handler: (file) => handleConvert('gif/to/webp', 'webp', file)
                }
            ]
        },
        {
            name: 'JPG –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã',
            formats: [
                { 
                    id: 'jpg-png', 
                    title: 'JPG –≤ PNG', 
                    accept: '.jpg,.jpeg',
                    icon: 'üèôÔ∏è',  // –ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ–π–∑–∞–∂
                    handler: (file) => handleConvert('jpg/to/png', 'png', file)
                },
                { 
                    id: 'jpg-gif', 
                    title: 'JPG –≤ GIF', 
                    accept: '.jpg,.jpeg',
                    icon: 'üé•',  // –ö–∏–Ω–æ–∞–ø–ø–∞—Ä–∞—Ç
                    handler: (file) => handleConvert('jpg/to/gif', 'gif', file)
                },
                { 
                    id: 'jpg-pdf', 
                    title: 'JPG –≤ PDF', 
                    accept: '.jpg,.jpeg',
                    icon: 'üì∏',  // –í—Å–ø—ã—à–∫–∞ —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç–∞
                    handler: (file) => handleConvert('jpg/to/pdf', 'pdf', file)
                },
                { 
                    id: 'jpg-svg', 
                    title: 'JPG –≤ SVG', 
                    accept: '.jpg,.jpeg',
                    icon: 'üñåÔ∏è',  // –ö–∏—Å—Ç—å
                    handler: (file) => handleConvert('jpg/to/svg', 'svg', file)
                },
                { 
                    id: 'jpg-tiff', 
                    title: 'JPG –≤ TIFF', 
                    accept: '.jpg,.jpeg',
                    icon: 'üìê',  // –õ–∏–Ω–µ–π–∫–∞
                    handler: (file) => handleConvert('jpg/to/tiff', 'tiff', file)
                },
                { 
                    id: 'jpg-webp', 
                    title: 'JPG –≤ WEBP', 
                    accept: '.jpg,.jpeg',
                    icon: 'üñ±Ô∏è',  // –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –º—ã—à—å
                    handler: (file) => handleConvert('jpg/to/webp', 'webp', file)
                }
            ]
        },
        {
            name: 'PNG –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã',
            formats: [
                { 
                    id: 'png-gif', 
                    title: 'PNG –≤ GIF', 
                    accept: '.png',
                    icon: 'üéûÔ∏è',  // –ö–∏–Ω–æ—Ñ–∏–ª—å–º
                    handler: (file) => handleConvert('png/to/gif', 'gif', file)
                },
                { 
                    id: 'png-jpg', 
                    title: 'PNG –≤ JPG', 
                    accept: '.png',
                    icon: 'üåÖ',  // –í–æ—Å—Ö–æ–¥
                    handler: (file) => handleConvert('png/to/jpg', 'jpg', file)
                },
                { 
                    id: 'png-tiff', 
                    title: 'PNG –≤ TIFF', 
                    accept: '.png',
                    icon: 'üèúÔ∏è',  // –ü—É—Å—Ç—ã–Ω—è
                    handler: (file) => handleConvert('png/to/tiff', 'tiff', file)
                },
                { 
                    id: 'png-pdf', 
                    title: 'PNG –≤ PDF', 
                    accept: '.png',
                    icon: 'üåÑ',  // –ì–æ—Ä—ã –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ
                    handler: (file) => handleConvert('png/to/pdf', 'pdf', file)
                },
                { 
                    id: 'png-svg', 
                    title: 'PNG –≤ SVG', 
                    accept: '.png',
                    icon: 'üñçÔ∏è',  // –ú–µ–ª–∫–∏
                    handler: (file) => handleConvert('png/to/svg', 'svg', file)
                },
                { 
                    id: 'png-webp', 
                    title: 'PNG –≤ WEBP', 
                    accept: '.png',
                    icon: 'üåâ',  // –ú–æ—Å—Ç –Ω–æ—á—å—é
                    handler: (file) => handleConvert('png/to/webp', 'webp', file)
                }
            ]
        },
    ];
     const getFilteredGroups = () => {
        if (selectedConverter) {
            return formatGroups.map(group => ({
                ...group,
                formats: group.formats.filter(format => format.id === selectedConverter)
            })).filter(group => group.formats.length > 0);
        }

        if (searchTerm) {
            return formatGroups.map(group => ({
                ...group,
                formats: group.formats.filter(format => 
                    format.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    format.id.toLowerCase().includes(searchTerm.toLowerCase())
                )
            })).filter(group => group.formats.length > 0);
        }

        return formatGroups;
    };

    const filteredGroups = getFilteredGroups();

    return (
        <div className="tools-container">
            <div className="header">
                <h1>–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h1>
                <p className="subtitle">–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏</p>
            </div>

            <div className="alert-container">
                <Alert message={message} />
            </div>
            <div className="converter-groups">
                {filteredGroups.length > 0 ? (
                    filteredGroups.map((group) => (
                        <div key={group.name} className="converter-group">
                            <h2 className="group-title">
                                <span className="group-icon">{group.icon}</span>
                                {group.name}
                            </h2>
                            <div className="converter-grid">
                                {group.formats.map((format) => (
                                    <FileConverter
                                        key={format.id}
                                        format={format}
                                        onConvert={setMessage}
                                        onToggle={toggleContainer}
                                        isActive={activeContainer === format.id}
                                        isLoading={isLoading}
                                    />
                                ))}
                            </div>
                        </div>
                    ))
                ) : (
                    <div className="no-results">
                        {selectedConverter 
                            ? '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
                            : '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É'}
                    </div>
                )}
            </div>

            <InfoBox />
        </div>
    );
};

export default Tools;